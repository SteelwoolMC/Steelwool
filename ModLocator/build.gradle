import io.github.steelwoolmc.steelwool.GenerateMappingsPlugin

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

configurations {
	intermediary
	mcpconfig
//	shade
//	implementation.extendsFrom shade
	fabricloader
}

dependencies {
	// TODO extract versions to gradle.properties
	intermediary "net.fabricmc:intermediary:1.18.2:v2"
	mcpconfig "de.oceanlabs.mcp:mcp_config:1.18.2@zip"
}


apply plugin: GenerateMappingsPlugin


archivesBaseName = "${mod_name}-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	fabricloader "net.fabricmc:fabric-loader:${fabric_loader_version}"
	implementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
//	implementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

processResources {
	// TODO where in the jar should we actually be putting this?
	from ("build/intermediary_to_tsrg.tiny") {into "io/github/steelwoolmc/steelwool/jartransform/mappings"}
}

// FIXME this currently doesn't re-run when the output name is changed
task processSource(type: Sync) {
	from sourceSets.main.java
	filesMatching ("**/Constants.java") {
		expand(["inner_jar": project(":Mod").jar.archiveName])
	}

	into "$buildDir/src"
}

compileJava {
	source = processSource.outputs
}

jar {
	archiveClassifier = "slim"
}

// Workaround for a bug in shadow. see: https://github.com/johnrengelman/shadow/issues/111#issuecomment-317233031
// Shadow has no way to exclude jars from being unzipped, so we nest a jar inside another jar, so that it'll only unzip the outer one.
// Since we're already doing this task anyway,
// we also use it as an opportunity to filter fabric classes before everything gets mixed together in the shadowJar task (where using `include`s becomes more annoying)
task shadowBugWorkaround(type: Jar) {
	dependsOn project(":Mod").jar
	// TODO exclude this from the build/libs directory?
	archiveBaseName = "shadow_stuff_ignore_this"
	from project(":Mod").jar.archiveFile.get()

	from (zipTree(project.configurations.fabricloader.singleFile)) {
		include "LICENSE_*"
		include "net/fabricmc/api/**"
		include "net/fabricmc/loader/api/**"
		exclude "net/fabricmc/loader/api/FabricLoader.class" // included in source so we can modify the file
		include "net/fabricmc/loader/impl/util/version/VersionParser.class"
		include "net/fabricmc/loader/impl/util/version/SemanticVersionImpl.class"
		include "net/fabricmc/loader/util/version/SemanticVersionImpl.class"
		include "net/fabricmc/loader/impl/util/version/VersionIntervalImpl.class"
		include "net/fabricmc/loader/impl/util/version/VersionPredicateParser.class"
		include "net/fabricmc/loader/impl/ObjectShareImpl.class"
	}
}

shadowJar {
	dependsOn shadowBugWorkaround
	from shadowBugWorkaround

	archiveClassifier = ''
	configurations = [/*project.configurations.shade*/]
	finalizedBy 'reobfShadowJar'
}

// Used to access the main built jar from the dummy project, so that we can run Steelwool in a development environment
configurations {
	mainJar {
		canBeConsumed = true
		canBeResolved = false
	}
}

artifacts {
	mainJar(shadowJar)
}

assemble.dependsOn shadowJar

reobf {
	shadowJar {}
}

jar.finalizedBy('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId project.group
//            artifactId project.archivesBaseName
//            version project.version
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://" + System.getenv("local_maven")
//        }
//    }
//}
