import io.github.steelwoolmc.steelwool.GenerateMappingsPlugin

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

configurations {
	intermediary
	mcpconfig
	shade
	implementation.extendsFrom shade
}

dependencies {
	// TODO extract versions to gradle.properties
	intermediary "net.fabricmc:intermediary:1.18.2:v2"
	mcpconfig "de.oceanlabs.mcp:mcp_config:1.18.2@zip"
}


apply plugin: GenerateMappingsPlugin


archivesBaseName = "${mod_name}-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version

	// TODO these run configurations will probably have to be different since this subproject is a ModLocator
	//      doesn't matter right now since it doesn't work in dev environments anyway
    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
//            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
				source sourceSets.main
//                modClientRun {
//                    source sourceSets.main
////                    source project(":Common").sourceSets.main
//                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
//            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modServerRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
//            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                modDataRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	shade "net.fabricmc:fabric-loader:${fabric_loader_version}"
//	implementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

// TODO find a cleaner way to only include the license and api package of fabric-loader
shadowJar {
	exclude "fabric*.json"
	exclude "fabric.mod.json"
	exclude "ui/**"
	exclude "net/fabricmc/loader/**"
	exclude "assets/fabricloader/**"
	// TODO is there anything here from fabric-loader we want to keep?
	// exclude fabric-loader's service providers
	exclude "META-INF/services/*fabric**"
	exclude "META-INF/services/*spongepowered**"
}

processResources {
	// TODO where in the jar should we actually be putting this?
	from ("build/intermediary_to_tsrg.tiny") {into "cursedflames/steelwool/jartransform/mappings"}
}

// FIXME this currently doesn't re-run when the output name is changed
task processSource(type: Sync) {
	from sourceSets.main.java
	filesMatching ("**/Constants.java") {
		expand(["inner_jar": project(":Mod").jar.archiveName])
	}

	into "$buildDir/src"
}

compileJava {
	source = processSource.outputs
}

jar {
	archiveClassifier = "slim"
}

// Workaround for a bug in shadow. see: https://github.com/johnrengelman/shadow/issues/111#issuecomment-317233031
// Shadow has no way to exclude jars from being unzipped, so we nest a jar inside another jar, so that it'll only unzip the outer one.
task shadowBugWorkaround(type: Jar) {
	dependsOn project(":Mod").jar
	// TODO exclude this from the build/libs directory?
	archiveBaseName = "shadow_bug_workaround_ignore_this"
	from project(":Mod").jar.archiveFile.get()
}

shadowJar {
	dependsOn shadowBugWorkaround
	from shadowBugWorkaround

	archiveClassifier = ''
	configurations = [project.configurations.shade]
	finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
	shadowJar {}
}

jar.finalizedBy('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId project.group
//            artifactId project.archivesBaseName
//            version project.version
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://" + System.getenv("local_maven")
//        }
//    }
//}
