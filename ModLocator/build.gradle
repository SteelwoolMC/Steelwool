import io.github.steelwoolmc.steelwool.GenerateMappingsPlugin

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

configurations {
	intermediary
	mcpconfig
	shaded {
		transitive = false
	}
}

dependencies {
	intermediary "net.fabricmc:intermediary:${intermediary_version}"
	mcpconfig "de.oceanlabs.mcp:mcp_config:${mcpconfig_version}"
}


apply plugin: GenerateMappingsPlugin


archivesBaseName = "${mod_name}-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	implementation project(path: ":loader-api", configuration: "output")
	shaded project(path: ":loader-api", configuration: "output")
}

processResources {
	// TODO where in the jar should we actually be putting this?
	from ("build/intermediary_to_tsrg.tiny") {into "io/github/steelwoolmc/steelwool/jartransform/mappings"}
	from ("build/intermediary_to_tsrg_temp_hack.tiny") {into "io/github/steelwoolmc/steelwool/jartransform/mappings"}
}

// FIXME this currently doesn't re-run when the output name is changed
task processSource(type: Sync) {
	from sourceSets.main.java
	filesMatching ("**/Constants.java") {
		expand(["inner_jar": project(":Mod").jar.archiveName])
	}

	into "$buildDir/src"
}

compileJava {
	source = processSource.outputs
}

jar {
	archiveClassifier = "slim"
}

// Workaround for a bug in shadow. see: https://github.com/johnrengelman/shadow/issues/111#issuecomment-317233031
// Shadow has no way to exclude jars from being unzipped, so we nest a jar inside another jar, so that it'll only unzip the outer one.
task shadowBugWorkaround(type: Jar) {
	dependsOn project(":Mod").jar
	// TODO exclude this from the build/libs directory?
	archiveBaseName = "shadow_stuff_ignore_this"
	from project(":Mod").jar.archiveFile.get()
}

shadowJar {
	dependsOn shadowBugWorkaround
	from shadowBugWorkaround

	from("licenses") {
		into "META-INF/"
	}
	from("LICENSE.txt") {
		into "META-INF/"
	}

	configurations = [project.configurations.shaded]

	archiveClassifier = ''
	finalizedBy 'reobfShadowJar'

	// TODO necessary?
	outputs.upToDateWhen { false }
}

// Used to access the main built jar from the dummy project, so that we can run Steelwool in a development environment
configurations {
	mainJar {
		canBeConsumed = true
		canBeResolved = false
	}
}

artifacts {
	mainJar(shadowJar)
}

assemble.dependsOn shadowJar

reobf {
	shadowJar {}
}

jar.finalizedBy('reobfJar')
