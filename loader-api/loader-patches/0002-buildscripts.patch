From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: CursedFlames <18627001+CursedFlames@users.noreply.github.com>
Date: Tue, 25 Jul 2023 02:49:14 +1200
Subject: [PATCH] buildscripts


diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000000000000000000000000000000000000..509f047971c913a17dff37b4d06ec160d0ec12e4
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,244 @@
+// Largely copied from the original fabric-loader buildscript.
+// We delete then recreate rather than patching to make rebasing simpler.
+buildscript {
+	dependencies {
+		classpath 'org.kohsuke:github-api:1.135'
+		classpath 'com.guardsquare:proguard-gradle:' + (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_11) ? '7.3.2' : '7.1.0')
+	}
+}
+
+plugins {
+	id 'java'
+	id 'java-library'
+	id 'maven-publish'
+	id 'fabric-loom' version '1.2-SNAPSHOT' apply false
+	id 'com.github.johnrengelman.shadow'
+	id 'me.modmuss50.remotesign' version "0.4.0"
+}
+
+sourceCompatibility = JavaVersion.VERSION_1_8
+targetCompatibility = JavaVersion.VERSION_1_8
+
+archivesBaseName = "fabric-loader"
+version = "0.14.21"
+
+def ENV = System.getenv()
+
+allprojects {
+	apply plugin: 'java-library'
+
+	repositories {
+		maven {
+			name = 'Fabric'
+			url = 'https://maven.fabricmc.net/'
+		}
+		mavenCentral() {
+			content {
+				// Force ASM to come from the fabric maven.
+				// This ensures that the ASM version has been mirrored for use by the launcher/installer.
+				excludeGroupByRegex "org.ow2.asm"
+			}
+		}
+	}
+}
+
+sourceSets {
+	main {
+		java.srcDirs = ['src/main/java', 'src/main/legacyJava']
+	}
+}
+
+configurations {
+	include
+	includeNonTransitive {
+		transitive = false
+	}
+
+	implementation {
+		extendsFrom include
+	}
+
+	api {
+		extendsFrom includeNonTransitive
+	}
+}
+
+dependencies {
+	// fabric-loader dependencies
+	api "org.ow2.asm:asm:${project.asm_version}"
+	api "org.ow2.asm:asm-analysis:${project.asm_version}"
+	api "org.ow2.asm:asm-commons:${project.asm_version}"
+	api "org.ow2.asm:asm-tree:${project.asm_version}"
+	api "org.ow2.asm:asm-util:${project.asm_version}"
+
+	api("net.fabricmc:sponge-mixin:${project.mixin_version}") {
+		exclude module: 'launchwrapper'
+		exclude module: 'guava'
+	}
+	includeNonTransitive 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
+	includeNonTransitive 'net.fabricmc:tiny-remapper:0.8.2'
+	includeNonTransitive 'net.fabricmc:access-widener:2.1.0'
+
+	include 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.6'
+	include 'org.ow2.sat4j:org.ow2.sat4j.pb:2.3.6'
+
+	testCompileOnly 'org.jetbrains:annotations:23.0.0'
+
+	// Unit testing for mod metadata
+	testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
+}
+
+processResources {
+	inputs.property "version", project.version
+
+	filesMatching("fabric.mod.json") {
+		expand "version": project.version
+	}
+}
+
+java {
+	withSourcesJar()
+}
+
+jar {
+	enabled = false
+	// Set the classifier to fix gradle task validation confusion.
+	archiveClassifier = "disabled"
+}
+
+test {
+	useJUnitPlatform()
+}
+
+shadowJar {
+	// Has stupid defaults, make our own
+	enabled = false
+}
+
+import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
+
+// Renaming in the shadow jar task doesnt seem to work, so do it here
+task getSat4jAbout(type: Copy) {
+	dependsOn project.configurations.include
+	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
+
+	from {
+		configurations.include.collect {
+			zipTree(it).matching {
+				include 'about.html'
+			}
+		}
+	}
+
+	rename 'about.html', 'net/fabricmc/loader/impl/lib/sat4j/about-sat4j.html'
+
+	into layout.buildDirectory.dir("sat4j")
+}
+
+tasks.register('fatJar', ShadowJar) {
+	dependsOn getSat4jAbout
+	from sourceSets.main.output
+	from project.childProjects.get("minecraft").sourceSets.main.output
+	from getSat4jAbout.destinationDir
+	from("LICENSE") {
+		rename { "${it}_${project.archivesBaseName}" }
+	}
+
+	archiveClassifier = "fat"
+	configurations = [project.configurations.include, project.configurations.includeNonTransitive]
+
+	relocate 'org.sat4j', 'net.fabricmc.loader.impl.lib.sat4j'
+
+	exclude 'about.html'
+	exclude 'sat4j.version'
+	exclude 'META-INF/maven/org.ow2.sat4j/*/**'
+
+	outputs.upToDateWhen { false }
+}
+
+tasks.withType(AbstractArchiveTask) {
+	preserveFileTimestamps = false
+	reproducibleFileOrder = true
+}
+
+sourcesJar {
+	from sourceSets.main.allSource
+//	from project(":minecraft").sourceSets.main.allSource
+}
+
+// useful for creating test mod jar
+task testJar(type: Jar) {
+	archiveClassifier = "test"
+	from sourceSets.test.output
+}
+
+task copyJson() {
+	def inJson = file('src/main/resources/fabric-installer.json')
+	def inLwJson = file('src/main/resources/fabric-installer.launchwrapper.json')
+
+	def outJson = file("build/libs/${archivesBaseName}-${version}.json")
+	def outLwJson = file("build/libs/${archivesBaseName}-${version}.launchwrapper.json")
+
+	inputs.files (inJson, inLwJson)
+	outputs.files(outJson, outLwJson)
+
+	doLast {
+		outJson.text = inJson.text
+		outLwJson.text = inLwJson.text
+	}
+}
+
+tasks.build.dependsOn "copyJson"
+
+tasks.withType(JavaCompile).configureEach {
+	it.options.encoding = "UTF-8"
+
+	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
+	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
+	// We'll use that if it's available, but otherwise we'll use the older option.
+	if (JavaVersion.current().isJava9Compatible()) {
+		it.options.release = 8
+	}
+}
+
+javadoc {
+	options {
+		if (file("README.html").exists()) {
+			overview = "README.html"
+		}
+		source = "8"
+		encoding = 'UTF-8'
+		charSet = 'UTF-8'
+		memberLevel = JavadocMemberLevel.PACKAGE
+		links(
+			'https://asm.ow2.io/javadoc/',
+			'https://docs.oracle.com/javase/8/docs/api/',
+			'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
+		)
+		// Disable the crazy super-strict doclint tool in Java 8
+		addStringOption('Xdoclint:none', '-quiet')
+	}
+	source sourceSets.main.allJava.srcDirs
+	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
+	include("**/api/**")
+	// workaround as one of the api stuff use that package
+	failOnError false
+}
+
+task javadocJar(type: Jar) {
+	dependsOn javadoc
+	from javadoc.destinationDir
+	archiveClassifier = 'javadoc'
+}
+
+build.dependsOn javadocJar
+
+// Causes more trouble than its worth
+tasks.withType(GenerateModuleMetadata) {
+	enabled = false
+}
+
+configurations.create("shaded")
+artifacts {
+	add("shaded", fatJar)
+}
diff --git a/minecraft/build.gradle b/minecraft/build.gradle
index 552e71512f9e1ffc9451b5eb3133571ae7daa686..8d95e4c1744ed91a0fbcbdfe33166a04704e51bf 100644
--- a/minecraft/build.gradle
+++ b/minecraft/build.gradle
@@ -9,7 +9,7 @@ repositories {
 }
 
 dependencies {
-	api project(":")
+	api project.parent
 
 	// log4j wrapper
 	compileOnly 'org.apache.logging.log4j:log4j-api:2.8.1'
